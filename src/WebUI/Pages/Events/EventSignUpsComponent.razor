@using LaDanse.Application.Events.Models
@using System.Collections.Immutable

@if (SignUpCount() == 0)
{
    @if (IsInThePast())
    {
        <p>There were no sign ups.</p>
    }
    else if (!IsCancelled())
    {
        <!-- no sign ups, in the future and not cancelled, invite the user to make one or inform about absence -->
        <div>
             <p>There are no sign ups yet. Be the first to sign up or inform us of your absence.</p>
             <p>
                 <a class="btn btn-success" ui-sref="events.event.signup.create({eventId: ctrl.event.id})">sign up</a>
                 <a class="btn btn-warning" ng-click="ctrl.cantComeClicked()" href="javascript:void(0);">can't come</a>
             </p>
         </div>
    }
    else if (IsCancelled())
    {
        <div>
            <p>This event has been cancelled, you can't sign up anymore.</p>
        </div>
    }
}
else if (IsCancelled())
{
    <div>
        <p>This event has been cancelled, you can't sign up anymore.</p>
    </div>
}
else
{
    <div class="container">
        
        <div class="row sign-up-row">
            <div class="col-4 center-text text-success">
                <div style="font-size: 1.5em;">@WillComeCount()</div>
                <div style="font-size: 0.7em;">Will Come</div>
            </div>
            <div class="col-4 center-text text-warning">
                <div style="font-size: 1.5em;">@MightComeCount()</div>
                <div style="font-size: 0.7em;">Might Come</div>
            </div>
            <div class="col-4 center-text text-danger">
                <div style="font-size: 1.5em;">@AbsenceCount()</div>
                <div style="font-size: 0.7em;">Absent</div>
            </div>
        </div>
        
        <hr style="border-top: 1px solid gray;"/>

        <div class="row sign-up-row">
            <div class="col-6">
                &nbsp;
            </div>
            <div class="col-2 center-text">
                <i class="fas fa-shield-alt"></i>
            </div>
            <div class="col-2 center-text">
                <i class="fas fa-plus-circle"></i>
            </div>
            <div class="col-2 center-text">
                <i class="fas fa-swords"></i>
            </div>
        </div>

        @foreach (var signUp in WillComeSignUps())
        {
            <div class="row sign-up-row">
                <div class="col-6">
                    @signUp.UserRef.Name
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForTank(signUp))
                    {
                        <i class="signUp far fa-times fa-1x text-success"></i>
                    }
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForHealer(signUp))
                    {
                        <i class="signUp far fa-times fa-1x text-success"></i>
                    }
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForDps(signUp))
                    {
                        <i class="signUp far fa-times fa-1x text-success"></i>
                    }
                </div>
            </div>
        }
        @foreach (var signUp in MightComeSignUps())
        {
            <div class="row sign-up-row">
                <div class="col-6">
                    @signUp.UserRef.Name
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForTank(signUp))
                    {
                        <i class="signUp far fa-question fa-1x text-warning"></i>
                    }
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForHealer(signUp))
                    {
                        <i class="signUp far fa-question fa-1x text-warning"></i>
                    }
                </div>
                <div class="col-2 center-text">
                    @if (IsSignUpForDps(signUp))
                    {
                        <i class="signUp far fa-question fa-1x text-warning"></i>
                    }
                </div>
            </div>
        }
        @foreach (var signUp in AbsenceSignUps())
        {
            <div class="row sign-up-row">
                <div class="col-6">
                    @signUp.UserRef.Name
                </div>
                <div class="col-6 center-text">
                    <i class="text-danger signUp cursor-default">can't come</i>
                </div>
            </div>
        }

    </div>
}

@code {
    
    [Parameter]
    public Event CalendarEvent { get; set; }
    
    private bool IsInThePast()
    {
        return CalendarEvent.InviteTime.CompareTo(DateTime.UtcNow) < 0;
    }
    
    private bool IsCancelled()
    {
        return CalendarEvent.State == "Cancelled";
    }

    private int SignUpCount()
    {
        return CalendarEvent.SignUps.Count();
    }
    
    private int WillComeCount()
    {
        return SignUpCountForType("WillCome");
    }
    
    private int MightComeCount()
    {
        return SignUpCountForType("MightCome");
    }
    
    private int AbsenceCount()
    {
        return SignUpCountForType("Absence");
    }
    
    private int SignUpCountForType(string strType)
    {
        return CalendarEvent.SignUps.Count(s => s.Type == strType);
    }

    private IEnumerable<SignUp> WillComeSignUps()
    {
        return CalendarEvent.SignUps
            .Where(s => s.Type == "WillCome")
            .OrderBy(s => s.UserRef.Name);
    }
    
    private IEnumerable<SignUp> MightComeSignUps()
    {
        return CalendarEvent.SignUps
            .Where(s => s.Type == "MightCome")
            .OrderBy(s => s.UserRef.Name);
    }
    
    private IEnumerable<SignUp> AbsenceSignUps()
    {
        return CalendarEvent.SignUps
            .Where(s => s.Type == "Absence")
            .OrderBy(s => s.UserRef.Name);
    }

    private bool IsSignUpForTank(SignUp signUp)
    {
        return IsSignUpForRole(signUp, "Tank");
    }
    
    private bool IsSignUpForHealer(SignUp signUp)
    {
        return IsSignUpForRole(signUp, "Healer");
    }
    
    private bool IsSignUpForDps(SignUp signUp)
    {
        return IsSignUpForRole(signUp, "Dps");
    }
    
    private bool IsSignUpForRole(SignUp signUp, string strRole)
    {
        return signUp.Roles.Count(r => r == strRole) != 0;
    }
}
