@page "/events"
@attribute [Authorize]

@using LaDanse.Application.Events.Models
@using LaDanse.Application.Events.Queries.GetAllEvents
@using LaDanse.WebUI.Models.Calendar
@using MediatR
@using Microsoft.AspNetCore.WebUtilities
@using System.Globalization
@using LaDanse.Common.Configuration
@using Microsoft.Extensions.Configuration

@inject NavigationManager NavManager
@inject IMediator Mediator
@inject IConfiguration Configuration

<div class="centered-page">

  <div class="pager">
    <div>
      <a @onclick="OlderButtonClicked" @onclick:preventDefault href="#">
        <i class="fa fa-arrow-left fa-1x"></i> older
      </a>
    </div>
    <div>
      <a @onclick="TodayButtonClicked" @onclick:preventDefault href="#">today</a>
    </div>
    <div>
      <a @onclick="NewerButtonClicked" @onclick:preventDefault href="#">
        newer <i class="fa fa-arrow-right fa-1x"></i>
      </a>
    </div>
  </div>

  <div class="legend">
    <div class="event-willCome">will come</div>
    <div class="event-mightCome">might come</div>
    <div class="event-absent">absent</div>
    <div class="event-notSigned">you haven't signed yet</div>
    <div class="event-cancelled">cancelled event</div>
  </div>

  <div class="calendar">

    <div class="weekday-row">
      <div>monday</div>
      <div>tuesday</div>
      <div>wednesday</div>
      <div>thursday</div>
      <div>friday</div>
      <div>saturday</div>
      <div>sunday</div>
    </div>

    @foreach (var week in _calendarMonth.Weeks())
    {
      <div class="week-row">

        @foreach (var calendarDay in week.Days())
        {
          <div class="day-container @RaidWeekCssClass(calendarDay)">

            <div class="day-container-header">
              <span class="@IsTodayCssClass(calendarDay)">@calendarDay.DisplayString()</span>
            </div>

            @if (!calendarDay.IsInThePast())
            {
              <div class="hover-me-container">
                <div class="hover-me">
                  <a routerLink="['/']">add an event</a>
                </div>
              </div>
            }
            
            @if (_eventsPopulated)
            {
              @foreach (var eventOnDay in calendarDay.Events())
              {
                <a href="/events/@eventOnDay.Id">
                  <div class="event-container @EventCssClass(eventOnDay)">
                    @eventOnDay.Name
                  </div>
                </a>
              }
            }
            else
            {
              <div class="spinner-container">
                <img src="/images/shared/waiting-spin.gif" alt="waiting spinner"/>
              </div>
            }
          
          </div>
        }

      </div>
    }
    

  </div>

</div>

@code {

  private RaidWeekModel _currentRaidWeek;
  private CalendarMonthModel _calendarMonth;
  
  private bool _eventsPopulated = false;
  
  protected override async Task OnInitializedAsync()
  {
    var showDay = GetShowDay();

    await InitCalendarAsync(showDay);
  }

  private DateTime GetShowDay()
  {
    var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

    if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("showDay", out var strShowDay))
    {
      return DateTime.Today;
    }
    
    if (!DateTime.TryParseExact(
      strShowDay, 
      "yyyyMMdd", 
      null, 
      DateTimeStyles.None, 
      out var fromDate))
    {
      fromDate = DateTime.Today;
    }

    return fromDate;
  }

  private void UpdateUri(DateTime showDay)
  {
    var baseUrlPart = Configuration.GetEnvironmentValue(EnvNames.LaDanseBaseUrl);
    
    NavManager.NavigateTo(baseUrlPart + "/events?showDate=" + showDay.ToString("yyyyMMdd"));
  }
  
  private async Task InitCalendarAsync(DateTime showDay)
  {
    _eventsPopulated = false;
    
    _currentRaidWeek = new RaidWeekModel(DateTime.Today);
    _calendarMonth = new CalendarMonthModel(showDay, _currentRaidWeek);

    await PopulateEventsAsync(_calendarMonth.FirstDay());

    _eventsPopulated = true;
    StateHasChanged();
    
    UpdateUri(showDay);
  }

  private async Task PopulateEventsAsync(DateTime fromDay)
  {
    var result = await Mediator.Send(new GetAllEventsQuery(fromDay));
    
    _calendarMonth.PopulateEvents(result);
  }

  private async Task OlderButtonClicked()
  {
    await InitCalendarAsync(_calendarMonth.GetStartOfPreviousMonth());
  }

  private async Task TodayButtonClicked()
  {
    await InitCalendarAsync(DateTime.Today);
  }

  private async Task NewerButtonClicked()
  {
    await InitCalendarAsync(_calendarMonth.GetStartOfNextMonth());
  }

  private static string RaidWeekCssClass(DayModel day)
  {
    return day.IsInRaidWeek() ? "day-in-raidweek" : "";
  }
  
  private static string IsTodayCssClass(DayModel day)
  {
    return day.IsToday() ? "today" : "";
  }

  private static string EventCssClass(Event @event)
  {
    const string currentUserId = "35d2e57a-2625-4f56-9e71-d77bd9be9d87";
    
    if (@event.State == "Cancelled")
    {
      return "event-cancelled";
    }
    
    var signUp = @event.SignUps.FirstOrDefault(s => s.UserRef.Id.ToString() == currentUserId);
      
    if (signUp != null)
    {
      return signUp.Type switch
      {
        "WillCome" => "event-willCome",
        "MightCome" => "event-mightCome",
        "Absent" => "event-absent",
        _ => "event-notSigned"
        };
    }
      
    return "event-notSigned";
  }
}
